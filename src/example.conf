# Example config file for corrodedbar
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# The config format of corrodedbar comprises of modules specified in square backets
# with key-value pairs separated by the equals sign '='.
#   
#   [module1]
#   val1 = qwer
#   val2 = asdf
#
#   [module2]
#   val1 = zxcv
#   val2 = uiop
#
# This example would set `val1` to `qwer` and `val2` to `asdf` for `module1`,
# and a similar thing for `module2`.
#
# Notice that the parser trims the spaces of both the key and the value. So, for
#
#   val1 = asdf
#   val2 =    asdf
#   val3    =             asdf
#
# `val1`, `val2` and `val3` will be set to `asdf`.
#
# If you want to include spaces at the edges of your value, wrap it in quotation marks:
#
#   val1 = asdf
#   val2 = "asdf"
#   val3 =   "asdf"
#   val4 = "  asdf"
#
# `val1`, `val2` and `val3` will be set to `asdf`, whereas `val4` will be set  to `  asdf`.
#
# Anything inside the quotation marks will be parsed verbatim, so for:
#
#   val1 = "
#   val2 = ""
#   val2 = """
#   val3 = """"
#
# `val1` and `val3` will be `"`, `val2` will be an empty string and `val4` will be `""`.
#
# Also, as you might have noticed, a hash symbol '#' at the start of the line
# will turn that line into a comment and will be ignored by the parser.



# Configures common settings that is not applicable to any specific module.
# 
# `modules` is a ***MANDATORY*** space-separated list of modules that will be loaded.
# These modules need to be defined further down the config file, otherwise
# they will be ignored.
#
# `leftpad` specifies the prefix of the output string that will be sent to your WM.
#
# `rightpad` specifies the suffix.
#
# `delim` specifies the space between the displayed modules.

[general]
modules=network bluetooth memory uptime cpu backlight microphone volume battery time
leftpad  = " "
rightpad = " "
delim    = "  "



# Now follow the configurations for individual modules that have been specified in
# `general`.`modules`.
#
# Each module has a few common options (these can be told apart by the fact that they
# do not have an underscore prefix).
#
# Mandatory common options:
#   `interval` sets the interval in milliseconds when the module should run.
#   `implements` specifies which internal implementation should implement this module.
# 
# Optional common options:
#   `startdelay` delays the first run of a module. After that, the `interval` option
#                behaves as normal.
#   `icon` sets the icon which will prefix the module's output
#          (separated by a single space).
#   `unixsignal` specifies the UNIX signal which will trigger an instant run of the
#                module if corrodedbar receives such signal.
#
# All module-specific options are prefixed with an underscore symbol '_'.



# Example module of the `network` implementation.
#
# Displays the current connection's IP address and subnet width.
#
# Does not use any specific options.

[network]
icon=üåé
interval=2000
implements=network

# Example module of the `bluetooth` implementation.
#
# Only displays if any Bluetooth radio is enabled, otherwise it hides.
#
# Optional options:
#   `_enabled` specifies the output string if Bluetooth is enabled.
#              Defaults to `Enabled`.

[bluetooth]
icon=Û∞ÇØ
interval=1000
implements=bluetooth

# Example module of the `memory` implementation.
#
# Displays information about the current state of system memory & swap.
#
# Optional options:
#   `_format` specifies the output format. The format options are:
#             - `%p` displays the amount of used physical memory
#             - `%P` displays the amount of free physical memory
#             - `%s` displays the amount of used swap
#             - `%S` displays the amount of free swap
#             Defaults to `%p%%/%s%%`.

[memory]
icon=üêè
interval=500
implements=memory

# Example module of the `uptime` implementation.
#
# Shows the system's uptime.
#
# Optional options:
#   `_format` specifies the output format. The format options are:
#             - `%d` displays the total number of days since boot.
#             - `%H` displays the hours since boot capped to 0-23.
#             - `%h` displays the total number of hours since boot.
#             - `%M` displays the minutes since boot capped to 0-59.
#             - `%m` displays the total number of minutes since boot.
#             - `%S` displays the seconds since boot capped to 0-59.
#             - `%s` displays the total number of seconds since boot.
#             - `%L` displays the milliseconds since boot capped to 0-999.
#             - `%l` displays the total number of milliseconds since boot.
#             Defaults to `%dd %Hh %Mm`.

[uptime]
icon=‚Üë
interval=15000
implements=uptime

# Example module of the `cpu` implementation.
#
# Displays info about the CPU and its usage.
#
# Mandatory options:
#   `_tempdevice` is a path to the temperature readout of the CPU
#                 (usually somewhere in /sys/class).
#                 If the `%t` formatting option is not used, it may point
#                 to a dummy path.
#
# Optional options:
#   `_format` specifies the output format. The format options are:
#             - `%t` displays the current CPU temperature.
#             - `%F` displays the highest clock speed of any core.
#             - `%f` displays the lowest clock speed of any core. TODO
#             Defaults to `%t¬∞C %F MHz`.

[cpu]
icon=üå°Ô∏è
interval=1000
implements=cpu

_tempdevice=/sys/class/hwmon/hwmon5/temp1_input

# Example module of the `backlight` implementation.
#
# Displays the current backlight level.
#
# This example listens for signal #41 which can be requested e.g. from your
# script which fires when you press the backlight up/down hotkey.
#
# Mandatory options:
#   `_device` is the name of the backlight device in /sys/class/backlight.
#
# Optional options:
#   `_showraw` displays the raw backlight value instead of percentage if true.
#              Defaults to `false`.

[backlight]
icon=‚òÄÔ∏è
interval=1000
implements=backlight
unixsignal=41

_device=amdgpu_bl1

# Example module of the `microphone` implementation.
#
# Only displays if any PulseAudio application is using the microphone, otherwise it hides.
#
# Optional options:
#   TODO `_active` specifies the output string if the microphone is being used.
#             Defaults to `active`.

[microphone]
icon=üé§
interval=1000
implements=microphone

# Example module of the `volume` implementation.
#
# Displays the output volume of the current PulseAudio output device.
#
# Does not use any specific options.

[volume]
icon=üîä
interval=1000
implements=volume
unixsignal=40

# Example module of the `battery` implementation.
#
# Displays the current battery status.
#
# Note that `icon` is not set, as the implementation adds one depending on the status of the battery (discharging, charging, full).
#
# Mandatory options:
#   `_device` specifies the battery device in /sys/class/power_supply.
#
# Optional options:
#   `_format` specifies the output format. The format options are:
#             - `%i` displays the appropriate icon.
#             - `%p` displays the current energy percentage.
#             - `%w` displays the current power at which the battery is (dis)charging.
#             - `%e` displays the time estimate till full (dis)charge.
#             Defaults to `%i %p%% (%w W %e)`. TODO - do not output the 'W'
#
#   `_esttimeformat` specifies the format of the time estimate. TODO
#                    - `%d` displays the total number of days till finish.
#                    - `%H` displays the hours till finish capped to 0-23.
#                    - `%h` displays the total number of hours till finish.
#                    - `%M` displays the minutes till finish capped to 0-59.
#                    - `%m` displays the total number of minutes till finish.
#                    - `%S` displays the seconds till finish capped to 0-59.
#                    - `%s` displays the total number of seconds till finish.
#                    - `%L` displays the milliseconds till finish capped to 0-999.
#                    - `%l` displays the total number of milliseconds till finish.
#                    Defaults to `%h:%M`.

[battery]
interval=2000
implements=battery

_device=BAT1

# Example module of the `time` implementation.
#
# Displays the current time.
#
# Optional options:
#   `_format` specifies the output time format. The format options are the same as
#             e.g. `strftime` in C, or `date` in the shell.
#             Defaults to `%H:%M`.

[time]
interval=1000
implements=time

_format=%a %d %b %H:%M:%S

